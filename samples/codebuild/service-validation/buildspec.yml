#
# This buildspec.yaml sample leverages AWS CodeBuild to create a fresh temporary Amazon EKS cluster with pahud/eks-kubectl-docker
# and validate the amazon-vpc-cni driver docker image tag version and eventually delete the temporarily Amazon EKS cluster.
#
version: 0.2

env:
  variables:
     SNSTOPIC: "arn:aws:sns:us-west-2:903779448426:SNS2IM"
     EKS_CLUSTER_NAME: "codebuild-test"

phases:
  pre_build:
    commands:
      - （ aws eks delete-cluster --name ${EKS_CLUSTER_NAME} && "cluster already exists, deleting in process" && CLUSTER_EXISTS=True ） || CLUSTER_EXISTS=False; exit 0
      - （ $CLUSTER_EXISTS && exit 1 ）|| exit 0
  build:
    commands:
      - aws eks create-cluster --name ${EKS_CLUSTER_NAME} --role-arn arn:aws:iam::903779448426:role/eksServiceRole --resources-vpc-config subnetIds=subnet-027aac6fd79af8b33,subnet-0734bd1b455d5a59d,subnet-06c49f80d3d0b4c5a,securityGroupIds=sg-028abcec6b7d2cef3
      - i=0; while [ $i -lt 30 ] ; do s=$(aws eks describe-cluster --name ${EKS_CLUSTER_NAME} | jq -r .cluster.status); test $s == "CREATING" && echo "still creating, sleep 60sec" && sleep 60 && i=$(($i+1)) || break; done
      - aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME}
  post_build:
    commands:
      - img=$(kubectl -n kube-system get ds/aws-node -o jsonpath='{$.spec.template.spec.containers[0].image}')
      - cniver="${img##*:}"
      - echo "got CNI version=${cniver}"
      - ( test $cniver == "1.1.0" && echo "CNI version unchanged" ) || ( echo "CNI version changed" && aws sns publish --topic-arn ${SNSTOPIC} --message "got CNI version=${cniver}" )
      - aws eks delete-cluster --name ${EKS_CLUSTER_NAME} || "clean up completed - cluster not exists" && echo "clean up completed"
